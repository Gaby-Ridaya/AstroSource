"""
AstroSource Pro - Backend API
G√©n√©rateur de th√®mes astraux avanc√© avec IA

Point d'entr√©e principal de l'application FastAPI
"""

import uvicorn
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager

from app.core.config import API_HOST, API_PORT, API_DEBUG, CORS_ORIGINS, validate_paths
from app.core.logging import logger
from app.api.etude_astro import router as etude_router


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gestionnaire de cycle de vie de l'application"""
    # Startup
    logger.info("üöÄ D√©marrage d'AstroSource Backend...")

    try:
        validate_paths()
        logger.info("‚úÖ Validation des chemins r√©ussie")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la validation: {e}")
        raise

    logger.info("‚úÖ AstroSource Backend d√©marr√© avec succ√®s!")

    yield

    # Shutdown
    logger.info("üõë Arr√™t d'AstroSource Backend...")


# Application FastAPI
app = FastAPI(
    title="AstroSource Pro API",
    description="API avanc√©e pour la g√©n√©ration de th√®mes astraux avec IA",
    version="2.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan,
)

# Middleware CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)

# Inclusion des routers
app.include_router(etude_router, prefix="/api", tags=["√âtude Astrologique"])

# Import des anciens endpoints (transition)
# TODO: Migrer ces endpoints vers des routers s√©par√©s
from astro_calcule import generate_theme
from websocket_manager import websocket_manager
import json
import time
from datetime import datetime


@app.get("/api/status")
async def get_status():
    """Endpoint de sant√© de l'API"""
    return JSONResponse(
        {
            "status": "healthy",
            "service": "AstroSource Pro API",
            "version": "2.0.0",
            "timestamp": datetime.now().isoformat(),
        }
    )


@app.post("/api/generer-svg")
async def generer_svg(data: dict):
    """
    G√©n√®re un th√®me astral SVG

    TODO: Migrer vers un router d√©di√© avec validation Pydantic
    """
    logger.info(f"G√©n√©ration SVG demand√©e pour: {data.get('nom', 'N/A')}")

    try:
        result = await generate_theme(data)
        logger.info("‚úÖ SVG g√©n√©r√© avec succ√®s")
        return result
    except Exception as e:
        logger.error(f"‚ùå Erreur g√©n√©ration SVG: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/files")
async def list_files():
    """
    Liste les fichiers g√©n√©r√©s

    TODO: Migrer vers un router d√©di√©
    """
    try:
        # Implementation temporaire
        return {"files": []}
    except Exception as e:
        logger.error(f"‚ùå Erreur listage fichiers: {e}")
        raise HTTPException(status_code=500, detail=str(e))


if __name__ == "__main__":
    logger.info(f"üåü Lancement d'AstroSource Pro sur {API_HOST}:{API_PORT}")

    uvicorn.run(
        "main:app", host=API_HOST, port=API_PORT, reload=API_DEBUG, log_level="info"
    )
