"""
Module de routage pour la g√©n√©ration de prompts artistiques IA
G√®re la cr√©ation de prompts bas√©s sur les th√®mes astrologiques
"""

from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from pathlib import Path
import logging
from typing import Optional

# Import du service de g√©n√©ration de prompts
from app.services.prompt_generation import prompt_generation_service
from app.core.config import settings

logger = logging.getLogger(__name__)

router = APIRouter()


class PromptRequest(BaseModel):
    """Mod√®le de donn√©es pour la requ√™te de g√©n√©ration de prompt"""

    theme_file: str  # Chemin vers le fichier theme JSON
    style_poetique: Optional[str] = None  # Style po√©tique √† appliquer
    output_name: Optional[str] = None  # Nom du fichier de sortie (optionnel)


@router.post("/generer-prompt")
async def generer_prompt_artistique(request: PromptRequest):
    """
    G√©n√®re un prompt artistique pour l'IA bas√© sur un th√®me astrologique
    """
    try:
        logger.info(f"üé® Demande de g√©n√©ration de prompt pour: {request.theme_file}")
        logger.info(f"üìÅ DATA_DIR configur√©: {settings.DATA_DIR}")

        # Validation du fichier th√®me
        theme_path = Path(request.theme_file)
        if not theme_path.is_absolute():
            # Utilisation de la configuration pour trouver le bon chemin
            theme_path = settings.DATA_DIR / request.theme_file

        logger.info(f"üîç Chemin final du th√®me: {theme_path}")
        logger.info(f"üìÇ Fichier existe: {theme_path.exists()}")

        if not theme_path.exists():
            raise HTTPException(
                status_code=404, detail=f"Fichier th√®me non trouv√©: {theme_path}"
            )

        # D√©finition du chemin de sortie
        if request.output_name:
            output_path = theme_path.parent / request.output_name
        else:
            output_path = theme_path.parent / "prompt_final.txt"

        # G√©n√©ration du prompt
        resultat = await prompt_generation_service.generate_artistic_prompt(
            theme_path=str(theme_path),
            output_path=str(output_path),
            style_poetique_choisi=request.style_poetique,
        )

        logger.info(f"‚úÖ Prompt g√©n√©r√© avec succ√®s: {output_path}")

        return {
            "status": "success",
            "message": f"Prompt artistique g√©n√©r√© avec succ√®s",
            "data": resultat,
            "output_file": str(output_path),
        }

    except FileNotFoundError as e:
        logger.error(f"‚ùå Fichier non trouv√©: {e}")
        raise HTTPException(status_code=404, detail=str(e))
    except RuntimeError as e:
        logger.error(f"‚ùå Erreur de g√©n√©ration: {e}")
        raise HTTPException(status_code=500, detail=str(e))
    except Exception as e:
        logger.error(f"‚ùå Erreur inattendue lors de la g√©n√©ration de prompt: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur de g√©n√©ration: {str(e)}")


@router.get("/styles-poetiques")
async def get_styles_poetiques():
    """
    Retourne la liste des styles po√©tiques disponibles
    """
    try:
        styles = prompt_generation_service.STYLE_POETIQUE

        logger.info(f"‚úÖ {len(styles)} styles po√©tiques disponibles")

        return {"status": "success", "styles": styles, "count": len(styles)}

    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la r√©cup√©ration des styles: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur de r√©cup√©ration: {str(e)}")


@router.get("/prompt-data-summary")
async def get_prompt_data_summary():
    """
    Retourne un r√©sum√© des donn√©es de prompts disponibles
    """
    try:
        # Chargement des donn√©es pour obtenir le r√©sum√©
        prompt_data = prompt_generation_service._load_prompt_data()

        summary = {}
        for key, data in prompt_data.items():
            if isinstance(data, dict):
                summary[key] = len(data)
            elif isinstance(data, list):
                summary[key] = len(data)
            else:
                summary[key] = 1

        logger.info(f"‚úÖ R√©sum√© des donn√©es de prompts g√©n√©r√©")

        return {
            "status": "success",
            "summary": summary,
            "total_files": len(prompt_data),
            "prompt_art_dir": str(prompt_generation_service.prompt_art_dir),
        }

    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la g√©n√©ration du r√©sum√©: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur de r√©sum√©: {str(e)}")
